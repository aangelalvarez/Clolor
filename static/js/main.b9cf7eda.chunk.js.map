{"version":3,"sources":["components/clock.tsx","hooks/useclock.tsx","context/ColorContext.ts","context/FontColorContext.ts","components/stopwatch.tsx","hooks/usestopwatch.tsx","components/colors.ts","context/ModeContext.ts","components/navbar.tsx","hooks/usenavbar.tsx","hooks/usetimer.tsx","components/timer.tsx","app.tsx","index.tsx"],"names":["Clock","useState","noAMPM","Date","time","setTime","isAmPm","ampm","setAMPM","updateAMPM","date","currAMPM","getHours","updateTime","hours","minutes","getMinutes","useEffect","interval","setInterval","clearInterval","useClock","className","ColorContext","createContext","FontColorContext","StopWatch","useContext","color","setColor","fontColor","setFontColor","timer","setTimer","isActive","setIsActive","isPaused","setIsPaused","countRef","useRef","handleStart","current","handlePause","handleResume","handleReset","formatTime","getSeconds","slice","Math","floor","parseInt","buttonStyle","backgroundColor","useStopWatch","onClick","style","colors","ModeContext","NavBar","mode","setMode","colorMap","map","fontColorMap","changeModeClock","changeModeStopwatch","changeModeTimer","UseNavBar","UseTimer","addHour","addMinute","addSecond","handleDismiss","Timer","fontSize","App","Provider","value","ReactDOM","render","document","getElementById"],"mappings":"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A,UACA,OACA,WACA,WACA,gBACA,WACA,WACA,YACA,YACA,cACA,iBACA,aACA,aACA,UACA,aACA,eACA,gBACA,gBACA,gBACA,gBACA,aACA,WACA,cACA,UACA,UACA,aACA,YACA,cACA,cACA,UACA,YACA,aACA,OACA,YACA,OACA,OACA,QACA,cACA,WACA,UACA,YACA,SACA,QACA,QACA,WACA,gBACA,YACA,eACA,YACA,aACA,YACA,uBACA,YACA,YACA,aACA,YACA,cACA,gBACA,eACA,iBACA,iBACA,iBACA,cACA,OACA,YACA,QACA,UACA,SACA,mBACA,aACA,eACA,eACA,iBACA,kBACA,oBACA,kBACA,kBACA,eACA,YACA,YACA,WACA,cACA,OACA,UACA,QACA,YACA,SACA,YACA,SACA,gBACA,YACA,gBACA,gBACA,aACA,YACA,OACA,OACA,OACA,aACA,SACA,gBACA,MACA,YACA,YACA,cACA,SACA,aACA,WACA,WACA,SACA,SACA,UACA,YACA,YACA,YACA,OACA,cACA,YACA,MACA,OACA,UACA,SACA,YACA,SACA,QACA,QACA,aACA,SACA,gBCrJSC,EAAcjC,wBAAmB,SCmC/BkC,EA9BU,WAErB,MCAqB,WACrB,MAA0B/B,qBAAWJ,GAA9BK,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SACd,EAAkCF,qBAAWF,GAAtCK,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,aAClB,EAAwBJ,qBAAW8B,GAA5BE,EAAP,EAAOA,KAAMC,EAAb,EAAaA,QAoBb,MAAO,CACHD,OACAE,SApBYL,EAAOM,KAAI,SAAClC,GAAD,OAC3B,wBAAQ0B,QAAW,WAAOzB,EAASD,IAASN,UAAY,cAAciC,MAAS,CAACH,gBAAiBxB,GAAjG,kBAoBImC,aAjBgBP,EAAOM,KAAI,SAAChC,GAAD,OAC/B,wBAAQwB,QAAW,WAAOvB,EAAaD,IAAaR,UAAY,kBAAkBiC,MAAS,CAACH,gBAAiBtB,GAA7G,kBAiBIkC,gBAdoB,WACpBJ,EAAQ,UAcRK,oBAZwB,WACxBL,EAAQ,cAYRM,gBAVoB,WACpBN,EAAQ,UAURhC,QACAE,aDvBAqC,GAPAN,GADJ,EAAQF,KAAR,EACIE,UACAE,EAFJ,EAEIA,aACAC,EAHJ,EAGIA,gBACAC,EAJJ,EAIIA,oBACAC,EALJ,EAKIA,gBACAtC,EANJ,EAMIA,MACAE,EAPJ,EAOIA,UAGJ,OACI,qBAAKR,UAAY,kBAAjB,SACI,sBAAKA,UAAY,SAAjB,UACI,yBAASA,UAAY,QAArB,mBACI,qBAAKA,UAAY,YAAYiC,MAAS,CAACH,gBAAiBxB,GAAxD,SAAiEiC,IACrE,yBAASvC,UAAY,YAArB,wBACI,qBAAKA,UAAY,gBAAgBiC,MAAS,CAACH,gBAAiBxB,GAA5D,SAAqEmC,IACzE,yBAASzC,UAAY,OAArB,kBACI,sBAAKA,UAAY,WAAWiC,MAAS,CAACH,gBAAiBxB,GAAvD,UACI,wBAAQ0B,QAAWU,EAAiB1C,UAAY,UAAUiC,MAAS,CAACH,gBAAiBtB,EAAWF,MAAOA,GAAvG,mBACA,wBAAQ0B,QAAWW,EAAqB3C,UAAY,UAAUiC,MAAS,CAACH,gBAAiBtB,EAAWF,MAAOA,GAA3G,uBACA,wBAAQ0B,QAAWY,EAAiB5C,UAAY,UAAUiC,MAAS,CAACH,gBAAiBtB,EAAWF,MAAOA,GAAvG,4BE0DTwC,G,MAnFE,WAEb,MAA0BzC,qBAAWJ,GAA9BK,EAAP,EAAOA,MAAOC,EAAd,EAAcA,SACd,EAAkCF,qBAAWF,GAAtCK,EAAP,EAAOA,UACP,GADA,EAAkBC,aACc9B,oBAAkB,IAAlD,mBAAOiC,EAAP,KAAiBC,EAAjB,KACA,EAAgClC,oBAAkB,GAAlD,mBAAOmC,EAAP,KAAiBC,EAAjB,KACA,EAA0BpC,mBAAiB,GAA3C,mBAAO+B,EAAP,KAAcC,EAAd,KACMK,EAAWC,iBAA4B,MAuD7C,MAAO,CACHX,QACAE,YACAD,WACAK,WACAE,WACAJ,QACAM,WACAI,YAvDgB,WAChBtB,cAAckB,EAASG,SACvBJ,GAAY,IAsDZO,YA5CgB,WAChBxB,cAAckB,EAASG,SACvBN,GAAY,GACZE,GAAY,GACZJ,EAAS,IAyCTU,aApDiB,WACjBN,GAAY,GACZC,EAASG,QAAUtB,aAAY,WAC3Bc,GAAS,SAACD,GAAD,OAAWA,EAAQ,OACzB,MAiDPQ,YAhEgB,WACZL,GAAY,GACZG,EAASG,QAAUtB,aAAY,WAC3Bc,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAAK,MA8DzCa,WAlCe,SAACb,GAChB,IAAMc,EAA8B,WAAKd,EAAQ,IAAMe,OAAO,GACxDhC,EAAwB,UAAMiC,KAAKC,MAAMjB,EAAQ,KACjDhB,EAA8B,WAAIkC,SAASnC,GAAW,IAAKgC,OAAO,GAClEnC,EAA4B,WAAIoC,KAAKC,MAAMjB,EAAQ,OAAQe,OAAO,GACxE,OAAIf,EAAQ,EAAU,GAAN,OAAUpB,EAAV,cAAwBI,EAAxB,cAAwC8B,GAC/Cd,GAAQ,GAAKE,EAAkB,aACjC,gBA4BPmC,QAlBY,WACZpC,GAAS,SAACD,GAAD,OAAWA,EAAQ,SAkB5BsC,UAtBc,WACdrC,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAsB5BuC,UA1Bc,WACdtC,GAAS,SAACD,GAAD,OAAWA,EAAQ,MA0B5BwC,cA7CkB,WAClBpD,cAAckB,EAASG,SACvBN,GAAY,GACZE,GAAY,GACZJ,EAAS,OCEFwC,EAvCA,WAEX,MAgBIL,IAfAxC,EADJ,EACIA,MACAE,EAFJ,EAEIA,UACAI,EAHJ,EAGIA,SACAE,EAJJ,EAIIA,SACAJ,EALJ,EAKIA,MAEAU,GAPJ,EAMIJ,SANJ,EAOII,aACAE,EARJ,EAQIA,YACAD,EATJ,EASIA,aACAH,EAVJ,EAUIA,YACAK,EAXJ,EAWIA,WACAwB,EAZJ,EAYIA,QACAC,EAbJ,EAaIA,UACAC,EAdJ,EAcIA,UACAC,EAfJ,EAeIA,cAGJ,OACI,sBAAKlD,UAAY,iBAAjB,UACI,qBAAKA,UAAY,mBAAjB,SAAqCuB,EAAWb,KAChD,sBAAKV,UAAY,wBAAjB,WACMY,GAAY,wBAAQoB,QAAWe,EAAS/C,UAAY,cAAciC,MAAS,CAACH,gBAAiBtB,EAAWF,MAAOA,GAAnG,qBACZM,GAAY,wBAAQoB,QAAWgB,EAAWhD,UAAY,cAAciC,MAAS,CAACH,gBAAiBtB,EAAWF,MAAOA,GAArG,oBACZM,GAAY,wBAAQoB,QAAWiB,EAAWjD,UAAY,cAAciC,MAAS,CAACH,gBAAiBtB,EAAWF,MAAOA,GAArG,mBACbI,EAAQ,IAAME,GAAY,wBAAQoB,QAAWd,EAAalB,UAAY,cAAciC,MAAS,CAACH,gBAAiBtB,EAAWF,MAAOA,GAAvG,mBAC1BI,EAAQ,IAAMI,GAAYF,GAAY,wBAAQoB,QAAWZ,EAAapB,UAAY,cAAciC,MAAS,CAACH,gBAAiBtB,EAAWF,MAAOA,GAAvG,mBACtCI,EAAQ,GAAKI,GAAYF,GAAY,wBAAQoB,QAAWX,EAAcrB,UAAY,cAAciC,MAAS,CAACH,gBAAiBtB,EAAWF,MAAOA,GAAxG,oBACrCI,EAAQ,GAAKE,GAAY,wBAAQoB,QAAWV,EAAatB,UAAY,cAAciC,MAAS,CAACH,gBAAiBtB,EAAWF,MAAOA,GAAvG,mBACzBI,GAAS,GAAKE,GAAY,wBAAQoB,QAAWkB,EAAelD,UAAY,cAAciC,MAAS,CAACH,gBAAiBtB,EAAWF,MAAOA,EAAO8C,SAAU,IAA1H,yBCA5BC,G,MAtBO,WAElB,MAA0B1E,mBAAS,aAAnC,mBAAO2B,EAAP,KAAcC,EAAd,KACA,EAAkC5B,mBAAS,iBAA3C,mBAAO6B,EAAP,KAAkBC,EAAlB,KACA,EAAwB9B,mBAAS,SAAjC,mBAAO0D,EAAP,KAAaC,EAAb,KAEA,OACI,cAACrC,EAAaqD,SAAd,CAAuBC,MAAS,CAACjD,QAAOC,YAAxC,SACA,cAACJ,EAAiBmD,SAAlB,CAA2BC,MAAS,CAAC/C,YAAWC,gBAAhD,SACA,cAAC0B,EAAYmB,SAAb,CAAsBC,MAAS,CAAClB,OAAMC,WAAtC,SACI,sBAAKL,MAAS,CAACH,gBAAiBxB,EAAOA,MAAOE,GAAYR,UAAY,MAAtE,UACI,cAAC,EAAD,IACU,UAATqC,GAAoB,cAAC,EAAD,IACX,cAATA,GAAwB,cAAC,EAAD,IACf,UAATA,GAAoB,cAAC,EAAD,eCtBrCmB,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.b9cf7eda.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useClock } from '../hooks/useclock';\r\nimport '../styles/clock.css';\r\n\r\n\r\nconst Clock: React.FC = () => {\r\n\r\n    const {time, \r\n        ampm, \r\n        updateAMPM, \r\n        updateTime, \r\n        isAmPm, \r\n        noAMPM\r\n    } = useClock(); \r\n\r\n    return (\r\n        <div className = 'clockContainer'>\r\n            <div className = 'mainClockContent'>{time}</div>\r\n            <div className = 'secondaryClockContent'>{ampm}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Clock;\r\n\r\n","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const useClock = () => {\r\n\r\n    const [time, setTime] = useState<Date | string>(noAMPM(new Date()));\r\n    const [ampm, setAMPM] = useState<Date | string>(isAmPm(new Date()));\r\n    \r\n    useEffect (() => {\r\n        let interval = setInterval(() => updateTime(), 1000);\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, [time]);\r\n\r\n    useEffect (() => {\r\n        let interval = setInterval(() => updateAMPM(), 1000);\r\n        \r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, [ampm]);\r\n\r\n    function updateAMPM(): void {\r\n        setAMPM(isAmPm(new Date()));\r\n    }\r\n\r\n    function isAmPm(date: Date): string {\r\n        let currAMPM: number | string = date.getHours();\r\n        currAMPM = currAMPM < 12 ? 'AM' : 'PM';\r\n        return currAMPM;\r\n    }\r\n\r\n    function updateTime(): void {\r\n        setTime(noAMPM(new Date()));\r\n    }\r\n\r\n    function noAMPM(date: Date): string {\r\n        let hours: number | string = date.getHours();\r\n        let minutes: number | string = date.getMinutes();\r\n        hours = hours % 12;\r\n        hours = hours ? hours : 12;\r\n        minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n        let simpleTime: number | string = hours + ':' + minutes; \r\n        return simpleTime;\r\n    }\r\n    return {\r\n        time,\r\n        ampm,\r\n        updateAMPM,\r\n        updateTime,\r\n        isAmPm,\r\n        noAMPM,\r\n    };\r\n};\r\n","import { createContext } from 'react';\r\n\r\nexport const ColorContext = createContext<any>('mintcream');","import { createContext } from 'react';\r\n\r\nexport const FontColorContext = createContext<any>('darkslategray');","import React from 'react';\r\nimport { useStopWatch } from '../hooks/usestopwatch'\r\nimport '../styles/stopwatch.css';\r\n\r\nconst StopWatch: React.FC = () => {\r\n\r\n    const {\r\n        timer, \r\n        isActive, \r\n        isPaused, \r\n        countRef, \r\n        handleStart, \r\n        handlePause, \r\n        handleResume, \r\n        handleReset, \r\n        formatTime, \r\n        buttonStyle\r\n    } = useStopWatch();\r\n\r\n    return (\r\n        <div className = 'stopWatchContainer'>\r\n            <div className = 'mainStopWatchContent'>{formatTime(timer)}</div>\r\n            <div className = 'secondaryStopWatchContent'>\r\n               {!isActive && <button className = 'stopWatchButton' onClick={handleStart} style = {buttonStyle}>Start</button>}\r\n               {!isPaused && isActive && <button className = 'stopWatchButton' onClick={handlePause} style = {buttonStyle}>Pause</button>}\r\n               {isPaused && isActive && <button className = 'stopWatchButton' onClick={handleResume} style = {buttonStyle}>Resume</button>}\r\n               {isActive && <button className = 'stopWatchButton' onClick={handleReset} style = {buttonStyle}>Reset</button>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StopWatch;\r\n","import { useState, useRef, useContext } from 'react';\r\nimport { ColorContext } from '../context/ColorContext';\r\nimport { FontColorContext } from '../context/FontColorContext';\r\n\r\nexport const useStopWatch = () => {\r\n    const {color, setColor} = useContext(ColorContext);\r\n    const {fontColor, setFontColor} = useContext(FontColorContext);\r\n\r\n    const [timer, setTimer] = useState<number>(0);\r\n    const [isActive, setIsActive] = useState<boolean>(false);\r\n    const [isPaused, setIsPaused] = useState<boolean>(false);\r\n    const countRef = useRef<null | number | any>(null);\r\n\r\n    const handleStart = ():void => {\r\n        setIsActive(true);\r\n        countRef.current = setInterval(() => {\r\n            setTimer((timer) => timer + 1)}, 1000)\r\n    };\r\n\r\n    const handlePause = ():void => {\r\n        clearInterval(countRef.current);\r\n        setIsPaused(true);\r\n    };\r\n\r\n    const handleResume = (): void => {\r\n        setIsPaused(false);\r\n        countRef.current = setInterval(() => {\r\n        setTimer((timer) => timer + 1);\r\n        }, 1000);\r\n    };\r\n\r\n    const handleReset = (): void => {\r\n        clearInterval(countRef.current);\r\n        setIsActive(false);\r\n        setIsPaused(false);\r\n        setTimer(0);\r\n    };\r\n\r\n\r\n\r\n    const formatTime = (timer: number): string => {\r\n        const getSeconds: string | number = `0${(timer % 60)}`.slice(-2);\r\n        const minutes: string | number = `${Math.floor(timer / 60)}`;\r\n        const getMinutes: string | number = `0${parseInt(minutes) % 60}`.slice(-2);\r\n        const getHours: string | number = `0${Math.floor(timer / 3600)}`.slice(-2);\r\n        return `${getHours} : ${getMinutes} : ${getSeconds}`;\r\n    };\r\n\r\n    const buttonStyle = {\r\n        color: color,\r\n        backgroundColor: fontColor,\r\n    };\r\n\r\n    return {timer, \r\n        isActive, \r\n        isPaused, \r\n        countRef, \r\n        handleStart, \r\n        handlePause, \r\n        handleResume, \r\n        handleReset, \r\n        formatTime, \r\n        buttonStyle};\r\n};\r\n\r\n\r\n","export const colors: Array<string> = [\r\n    '#1a1a1a',\r\n    '#333333',\r\n    \"AliceBlue\",\r\n    \"AntiqueWhite\",\r\n    \"Aqua\",\r\n    \"Aquamarine\",\r\n    \"Azure\",\r\n    \"Beige\",\r\n    \"Bisque\",\r\n    \"Black\",\r\n    \"BlanchedAlmond\",\r\n    \"Blue\",\r\n    \"BlueViolet\",\r\n    \"Brown\",\r\n    \"BurlyWood\",\r\n    \"CadetBlue\",\r\n    \"Chartreuse\",\r\n    \"Chocolate\",\r\n    \"Coral\",\r\n    \"CornflowerBlue\",\r\n    \"Cornsilk\",\r\n    \"Crimson\",\r\n    \"Cyan\",\r\n    \"DarkBlue\",\r\n    \"DarkCyan\",\r\n    \"DarkGoldenRod\",\r\n    \"DarkGray\",\r\n    \"DarkGrey\",\r\n    \"DarkGreen\",\r\n    \"DarkKhaki\",\r\n    \"DarkMagenta\",\r\n    \"DarkOliveGreen\",\r\n    \"DarkOrange\",\r\n    \"DarkOrchid\",\r\n    \"DarkRed\",\r\n    \"DarkSalmon\",\r\n    \"DarkSeaGreen\",\r\n    \"DarkSlateBlue\",\r\n    \"DarkSlateGray\",\r\n    \"DarkSlateGrey\",\r\n    \"DarkTurquoise\",\r\n    \"DarkViolet\",\r\n    \"DeepPink\",\r\n    \"DeepSkyBlue\",\r\n    \"DimGray\",\r\n    \"DimGrey\",\r\n    \"DodgerBlue\",\r\n    \"FireBrick\",\r\n    \"FloralWhite\",\r\n    \"ForestGreen\",\r\n    \"Fuchsia\",\r\n    \"Gainsboro\",\r\n    \"GhostWhite\",\r\n    \"Gold\",\r\n    \"GoldenRod\",\r\n    \"Gray\",\r\n    \"Grey\",\r\n    \"Green\",\r\n    \"GreenYellow\",\r\n    \"HoneyDew\",\r\n    \"HotPink\",\r\n    \"IndianRed\",\r\n    \"Indigo\",\r\n    \"Ivory\",\r\n    \"Khaki\",\r\n    \"Lavender\",\r\n    \"LavenderBlush\",\r\n    \"LawnGreen\",\r\n    \"LemonChiffon\",\r\n    \"LightBlue\",\r\n    \"LightCoral\",\r\n    \"LightCyan\",\r\n    \"LightGoldenRodYellow\",\r\n    \"LightGray\",\r\n    \"LightGrey\",\r\n    \"LightGreen\",\r\n    \"LightPink\",\r\n    \"LightSalmon\",\r\n    \"LightSeaGreen\",\r\n    \"LightSkyBlue\",\r\n    \"LightSlateGray\",\r\n    \"LightSlateGrey\",\r\n    \"LightSteelBlue\",\r\n    \"LightYellow\",\r\n    \"Lime\",\r\n    \"LimeGreen\",\r\n    \"Linen\",\r\n    \"Magenta\",\r\n    \"Maroon\",\r\n    \"MediumAquaMarine\",\r\n    \"MediumBlue\",\r\n    \"MediumOrchid\",\r\n    \"MediumPurple\",\r\n    \"MediumSeaGreen\",\r\n    \"MediumSlateBlue\",\r\n    \"MediumSpringGreen\",\r\n    \"MediumTurquoise\",\r\n    \"MediumVioletRed\",\r\n    \"MidnightBlue\",\r\n    \"MintCream\",\r\n    \"MistyRose\",\r\n    \"Moccasin\",\r\n    \"NavajoWhite\",\r\n    \"Navy\",\r\n    \"OldLace\",\r\n    \"Olive\",\r\n    \"OliveDrab\",\r\n    \"Orange\",\r\n    \"OrangeRed\",\r\n    \"Orchid\",\r\n    \"PaleGoldenRod\",\r\n    \"PaleGreen\",\r\n    \"PaleTurquoise\",\r\n    \"PaleVioletRed\",\r\n    \"PapayaWhip\",\r\n    \"PeachPuff\",\r\n    \"Peru\",\r\n    \"Pink\",\r\n    \"Plum\",\r\n    \"PowderBlue\",\r\n    \"Purple\",\r\n    \"RebeccaPurple\",\r\n    \"Red\",\r\n    \"RosyBrown\",\r\n    \"RoyalBlue\",\r\n    \"SaddleBrown\",\r\n    \"Salmon\",\r\n    \"SandyBrown\",\r\n    \"SeaGreen\",\r\n    \"SeaShell\",\r\n    \"Sienna\",\r\n    \"Silver\",\r\n    \"SkyBlue\",\r\n    \"SlateBlue\",\r\n    \"SlateGray\",\r\n    \"SlateGrey\",\r\n    \"Snow\",\r\n    \"SpringGreen\",\r\n    \"SteelBlue\",\r\n    \"Tan\",\r\n    \"Teal\",\r\n    \"Thistle\",\r\n    \"Tomato\",\r\n    \"Turquoise\",\r\n    \"Violet\",\r\n    \"Wheat\",\r\n    \"White\",\r\n    \"WhiteSmoke\",\r\n    \"Yellow\",\r\n    \"YellowGreen\",\r\n];","import { createContext } from 'react';\r\nexport const ModeContext = createContext<any>('clock');","import React from 'react'\r\nimport '../styles/navbar.css';\r\nimport { UseNavBar } from '../hooks/usenavbar';\r\n\r\n\r\n\r\nconst NavBar: React.FC = () => {\r\n \r\n    const { mode, \r\n        colorMap, \r\n        fontColorMap, \r\n        changeModeClock, \r\n        changeModeStopwatch, \r\n        changeModeTimer, \r\n        color, \r\n        fontColor\r\n    } = UseNavBar();\r\n\r\n    return (\r\n        <div className = 'navBarContainer'>\r\n            <div className = 'navBar'>\r\n                <section className = 'Color'>Color</section>\r\n                    <div className = 'colorDrop' style = {{backgroundColor: color}}>{colorMap}</div>\r\n                <section className = 'fontColor'>Font Color</section>\r\n                    <div className = 'fontColorDrop' style = {{backgroundColor: color}}>{fontColorMap}</div>\r\n                <section className = 'mode'>Mode</section>\r\n                    <div className = 'modeDrop' style = {{backgroundColor: color}}>\r\n                        <button onClick = {changeModeClock} className = 'modeBtn' style = {{backgroundColor: fontColor, color: color }}>Clock</button>\r\n                        <button onClick = {changeModeStopwatch} className = 'modeBtn' style = {{backgroundColor: fontColor, color: color }}>StopWatch</button>\r\n                        <button onClick = {changeModeTimer} className = 'modeBtn' style = {{backgroundColor: fontColor, color: color }}>Timer</button>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react'\r\nimport { useState } from 'react';\r\nimport { colors } from '../components/colors';\r\nimport { ColorContext } from '../context/ColorContext';\r\nimport { FontColorContext } from '../context/FontColorContext';\r\nimport { useContext } from 'react';\r\nimport { ModeContext } from '../context/ModeContext';\r\n\r\nexport const UseNavBar = () => {\r\n    const {color, setColor} = useContext(ColorContext);\r\n    const {fontColor, setFontColor} = useContext(FontColorContext);\r\n    const {mode, setMode} = useContext(ModeContext);\r\n\r\n    const colorMap= colors.map((color: string | any) => \r\n    <button onClick = {() => {setColor(color)}} className = 'colorButton' style = {{backgroundColor: color}}> </button>\r\n    );\r\n\r\n    const fontColorMap= colors.map((fontColor: string | any) => \r\n    <button onClick = {() => {setFontColor(fontColor)}} className = 'fontColorButton' style = {{backgroundColor: fontColor}}> </button>\r\n    );\r\n\r\n    const changeModeClock = (): void => {\r\n        setMode('clock');\r\n    }\r\n    const changeModeStopwatch = (): void => {\r\n        setMode('stopwatch');\r\n    }\r\n    const changeModeTimer = (): void => {\r\n        setMode('timer');\r\n    }\r\n\r\n    return {\r\n        mode, \r\n        colorMap, \r\n        fontColorMap, \r\n        changeModeClock, \r\n        changeModeStopwatch, \r\n        changeModeTimer,\r\n        color, \r\n        fontColor\r\n    };\r\n};\r\n","import { useState, useContext, useRef, useEffect } from 'react';\r\nimport { ColorContext } from '../context/ColorContext';\r\nimport { FontColorContext } from '../context/FontColorContext';\r\n\r\nconst UseTimer = () => {\r\n\r\n    const {color, setColor} = useContext(ColorContext);\r\n    const {fontColor, setFontColor} = useContext(FontColorContext);\r\n    const [isActive, setIsActive] = useState<boolean>(false);\r\n    const [isPaused, setIsPaused] = useState<boolean>(false);\r\n    const [timer, setTimer] = useState<number>(0);\r\n    const countRef = useRef<null | number | any>(null);\r\n\r\n    const handleStart = (): void => {\r\n            setIsActive(true);\r\n            countRef.current = setInterval(() => {\r\n                setTimer((timer) => timer - 1)}, 1000)\r\n    };\r\n\r\n    const handlePause = (): void => {\r\n        clearInterval(countRef.current);\r\n        setIsPaused(true);\r\n    };\r\n\r\n    const handleResume = () => {\r\n        setIsPaused(false);\r\n        countRef.current = setInterval(() => {\r\n            setTimer((timer) => timer - 1);\r\n            }, 1000);\r\n    };\r\n\r\n    const handleReset = (): void => {\r\n        clearInterval(countRef.current);\r\n        setIsActive(false);\r\n        setIsPaused(false);\r\n        setTimer(0);\r\n    };\r\n    const handleDismiss = (): void => {\r\n        clearInterval(countRef.current);\r\n        setIsActive(false);\r\n        setIsPaused(false);\r\n        setTimer(0);\r\n    };\r\n\r\n    const formatTime = (timer: number): string => {\r\n        const getSeconds: string | number = `0${(timer % 60)}`.slice(-2);\r\n        const minutes: string | number = `${Math.floor(timer / 60)}`;\r\n        const getMinutes: string | number = `0${parseInt(minutes) % 60}`.slice(-2);\r\n        const getHours: string | number = `0${Math.floor(timer / 3600)}`.slice(-2);\r\n        if (timer > 0) {return `${getHours} : ${getMinutes} : ${getSeconds}`}\r\n        else if (timer <=0 && isActive) {return 'TIMER DONE'}\r\n        return '00 : 00 : 00';\r\n       \r\n    }\r\n\r\n    const addSecond = (): void => {\r\n        setTimer((timer) => timer + 1);\r\n    };\r\n    const addMinute = (): void => {\r\n        setTimer((timer) => timer + 60);\r\n    };\r\n    const addHour = (): void => {\r\n        setTimer((timer) => timer + 3600);\r\n    };\r\n\r\n\r\n    return {\r\n        color, \r\n        fontColor,\r\n        setColor,\r\n        isActive,\r\n        isPaused,\r\n        timer,\r\n        countRef,\r\n        handlePause,\r\n        handleReset,\r\n        handleResume,\r\n        handleStart,\r\n        formatTime,\r\n        addHour,\r\n        addMinute,\r\n        addSecond,\r\n        handleDismiss,\r\n    };\r\n\r\n};\r\n\r\nexport default UseTimer;\r\n","import React from 'react';\r\nimport '../styles/timer.css';\r\nimport UseTimer from '../hooks/usetimer';\r\n\r\n const Timer = () => {\r\n\r\n    const {\r\n        color, \r\n        fontColor,\r\n        isActive,\r\n        isPaused,\r\n        timer,\r\n        countRef,\r\n        handlePause,\r\n        handleReset,\r\n        handleResume,\r\n        handleStart,\r\n        formatTime,\r\n        addHour,\r\n        addMinute,\r\n        addSecond,\r\n        handleDismiss,\r\n    } = UseTimer();\r\n\r\n    return (\r\n        <div className = 'timerContainer'>\r\n            <div className = 'mainTimerContent'>{formatTime(timer)}</div>        \r\n            <div className = 'secondaryTimerContent'>\r\n                {!isActive && <button onClick = {addHour} className = 'timerButton' style = {{backgroundColor: fontColor, color: color}}>+ Hour</button>}\r\n                {!isActive && <button onClick = {addMinute} className = 'timerButton' style = {{backgroundColor: fontColor, color: color}}>+ Min</button>}\r\n                {!isActive && <button onClick = {addSecond} className = 'timerButton' style = {{backgroundColor: fontColor, color: color}}>+ Sec</button>}\r\n                {timer > 0 && !isActive && <button onClick = {handleStart} className = 'timerButton' style = {{backgroundColor: fontColor, color: color}}>Start</button>}\r\n                {timer > 0 && !isPaused && isActive && <button onClick = {handlePause} className = 'timerButton' style = {{backgroundColor: fontColor, color: color}}>Pause</button>}\r\n                {timer > 0 && isPaused && isActive && <button onClick = {handleResume} className = 'timerButton' style = {{backgroundColor: fontColor, color: color}}>Resume</button>}\r\n                {timer > 0 && isActive && <button onClick = {handleReset} className = 'timerButton' style = {{backgroundColor: fontColor, color: color}}>Reset</button>}\r\n                {timer <= 0 && isActive && <button onClick = {handleDismiss} className = 'timerButton' style = {{backgroundColor: fontColor, color: color, fontSize: 25}}>×</button>}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n \r\n\r\nexport default Timer;\r\n","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport Clock from './components/clock';\r\nimport StopWatch from './components/stopwatch';\r\nimport NavBar from './components/navbar';\r\nimport Timer from './components/timer';\r\nimport { ColorContext } from './context/ColorContext';\r\nimport { FontColorContext} from './context/FontColorContext';\r\nimport { ModeContext } from './context/ModeContext';\r\nimport './app.css';\r\n\r\n\r\n\r\nconst App: React.FC = () => {\r\n\r\n    const [color, setColor] = useState('mintcream');\r\n    const [fontColor, setFontColor] = useState('darkslategray');\r\n    const [mode, setMode] = useState('clock');\r\n\r\n    return (\r\n        <ColorContext.Provider value = {{color, setColor}}>\r\n        <FontColorContext.Provider value = {{fontColor, setFontColor}}>\r\n        <ModeContext.Provider value = {{mode, setMode}}>\r\n            <div style = {{backgroundColor: color, color: fontColor}} className = 'app'>\r\n                <NavBar />\r\n                {mode === 'clock' && <Clock />}\r\n                {mode === 'stopwatch' && <StopWatch />}\r\n                {mode === 'timer' && <Timer />}\r\n            </div>\r\n        </ModeContext.Provider>\r\n        </FontColorContext.Provider>\r\n        </ColorContext.Provider>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}